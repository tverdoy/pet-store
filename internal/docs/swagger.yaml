definitions:
  controller.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  domain.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  domain.Order:
    properties:
      complete:
        type: boolean
      id:
        type: integer
      petId:
        type: integer
      shipDate:
        type: string
      status:
        $ref: '#/definitions/domain.OrderStatus'
    type: object
  domain.OrderStatus:
    enum:
    - placed
    - approved
    - delivered
    type: string
    x-enum-varnames:
    - PlacedOrderStatus
    - ApprovedOrderStatus
    - DeliveredOrderStatus
  domain.Pet:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      id:
        type: integer
      name:
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/domain.PetStatus'
      tags:
        items:
          $ref: '#/definitions/domain.Tag'
        type: array
    type: object
  domain.PetStatus:
    enum:
    - available
    type: string
    x-enum-varnames:
    - PetStatusAvailable
  domain.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  domain.User:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is implementation of PetStore API
  title: PetStore
  version: "1.0"
paths:
  /pet:
    post:
      consumes:
      - application/json
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/domain.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: Pet object that was added
          schema:
            $ref: '#/definitions/domain.Pet'
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new pet to the store
      tags:
      - pet
    put:
      consumes:
      - application/json
      parameters:
      - description: Pet object that needs to update
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/domain.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: Pet updated
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Pet not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a pet in the store with form data
      tags:
      - pet
  /pet/{petId}:
    delete:
      parameters:
      - description: ID of pet to delete
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pet deleted
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Pet not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a pet by ID
      tags:
      - pet
    get:
      parameters:
      - description: ID of pet to return
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Find pet by ID
          schema:
            $ref: '#/definitions/domain.Pet'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Pet not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a pet by ID
      tags:
      - pet
  /pet/findByStatus:
    get:
      parameters:
      - description: Status values that need to be considered for filter
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pets found by status
          schema:
            items:
              $ref: '#/definitions/domain.Pet'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Pet not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a pet by ID
      tags:
      - pet
  /store/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: Order object that needs to be added to the store
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/domain.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Order object that was added
          schema:
            $ref: '#/definitions/domain.Order'
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new order to the store
      tags:
      - store
  /store/order/{orderId}:
    delete:
      parameters:
      - description: ID of order to delete
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete order by ID
      tags:
      - store
    get:
      parameters:
      - description: ID of order to return
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Find order by ID
          schema:
            $ref: '#/definitions/domain.Order'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Order an order by ID
      tags:
      - store
  /user:
    post:
      consumes:
      - application/json
      parameters:
      - description: User to add to the store
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Create a new user
      tags:
      - user
    put:
      consumes:
      - application/json
      parameters:
      - description: User object that needs to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Update a user with form data
      tags:
      - user
  /user/{username}:
    delete:
      parameters:
      - description: Username of user to delete
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a user by username
      tags:
      - user
    get:
      parameters:
      - description: Username of user to return
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Find user by Username
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user by username
      tags:
      - user
  /user/createWithList:
    post:
      consumes:
      - application/json
      parameters:
      - description: Users to add to the store
        in: body
        name: users
        required: true
        schema:
          items:
            $ref: '#/definitions/domain.User'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Users created
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Create a list of new users
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controller.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User login
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Login a user
      tags:
      - user
  /user/logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User logout
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Logout a user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: Login
    name: Authorization
    type: apiKey
swagger: "2.0"
